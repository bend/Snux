package {	import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.Event;	import flash.events.KeyboardEvent;/*pour utiliser la classe KeyboardEvent*/	import flash.ui.Keyboard;/*pour utiliser la classe Keyboard*/	import flash.display.Sprite;	import flash.text.TextField;	import flash.display.SimpleButton;	import flash.events.MouseEvent;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.sendToURL;	import flash.net.URLLoader;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;	import flash.net.navigateToURL;	public class Snux extends MovieClip {		public var containerSerpent:MovieClip;		public var containerScreen:MovieClip;		public var containerPauseScreen:MovieClip;		public var containerPommeN:MovieClip;		public var containerPommeV:MovieClip;		public var containerPommeMar:MovieClip;		public var containerScoreBarre:MovieClip;		public var containerCadreHG:MovieClip;		public var containerCadreVG:MovieClip;		public var containerCadreHD:MovieClip;		public var containerCadreVD:MovieClip;		public var containerObstacleH:MovieClip;		public var containerObstacleV:MovieClip;		private var soundOn:MovieClip;		private var soundOff:MovieClip;		private var eatSound:Sound;		private var failSound:Sound;		private var titleSound:Sound;		public var startScreen:Sprite;		public var bouton_jouer:SimpleButton;		public var bouton_rejouer:SimpleButton;		public var bouton_menup:SimpleButton;		public var bouton_menu:SimpleButton;		public var bouton_submit:SimpleButton;		public var bouton_option:SimpleButton;		public var bouton_aide:SimpleButton;		public var bouton_retour:SimpleButton;		public var bouton_valider:SimpleButton;		public var bouton_continuer:SimpleButton;		public var bouton_son:SimpleButton;		public var scoreField:TextField;		public var timeField:TextField;		private var vectSerpent:Array;		private var keyTouch:Array=new Array;		private var tailleScreenX:Number=640;		private var tailleScreenY:Number=480;		private var tailleSerpent:Number=6;		public var limite:Number;		private var tailleObstacleHx:Number=240;		private var tailleObstacleHy:Number=40;		private var tailleObstacleVx:Number=40;		private var tailleObstacleVy:Number=240;		private var speed:Number=20;		private var time:Number=0;		private var scoreValue:Number=0;		private var nbGr:Number=6;		private var nbDim:Number=3;		private var timePommeV:Number=100;		private var timePommeM:Number=200;		private var timeElapsed:Number=0;		private var gameOver:Boolean=false;		private var isPommeM:Boolean=false;		private var isPommeV:Boolean=false;		private var isPause:Boolean=false;		public var cadre:Boolean;		public var obstacle:Boolean;		public var vectRes:Array= new Array;//(cadre, obstacle, son, vitesse);		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function Snux() {			initScreenEntry();			initVectRes();		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function StartGame(vectRes:Array) {			ResetVar();			initScreenJeu();			initKey();			initSerpent();			if (vectRes[3]==1) {				stage.frameRate=10;			} else if (vectRes[3]==2) {				stage.frameRate=15;			} else if (vectRes[3]==2) {				stage.frameRate=20;			}			if (vectRes[1]) {				initObstacles();				obstacle=true;			} else if (!vectRes[1]) {				obstacle=false;			}			initPommeN();			initPommeV();			initPommeM();			if (vectRes[0]) {				initCadres();				cadre=true;			} else if (!vectRes[0]) {				cadre=false;			}			initScoreBarre();		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function MouseClickJouer(E:MouseEvent) {			stage.removeEventListener(KeyboardEvent.KEY_DOWN,StartKey);			StartGame(vectRes);		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function MouseClickMenu(E:MouseEvent) {			initScreenEntry();		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function MouseClickAide(E:MouseEvent) {			stage.removeEventListener(KeyboardEvent.KEY_DOWN,StartKey);			initScreenHelp();		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function MouseClickOption(E:MouseEvent) {			stage.removeEventListener(KeyboardEvent.KEY_DOWN,StartKey);			initOptionScreen();		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function MouseClickValider(E:MouseEvent) {			vectRes=containerScreen.recupOptions(vectRes);			initScreenEntry();		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function MouseResumeGame(E:MouseEvent) {			isPause=false;			containerPauseScreen.visible=false;			stage.addEventListener(Event.ENTER_FRAME,enterFrameHandler);		}		public function MouseClickSound(E:MouseEvent) {			if (vectRes[2]) {				soundOn.visible=false;				vectRes[2]=false;				soundOff=new SoundOff();				containerPauseScreen.addChild(soundOff);				soundOff.x=350;				soundOff.y=300;			} else if (!vectRes[2]) {				soundOff.visible=false;				vectRes[2]=true;				soundOn=new SoundOn();				containerPauseScreen.addChild(soundOn);				soundOn.x=350;				soundOn.y=300;			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function ResetVar() {			tailleSerpent=5;			time=0;			timeElapsed=0;			isPommeM=false;			isPommeV=false;			timePommeV=100;			timePommeM=200;			scoreValue=0;			isPause=false;			gameOver=false;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initScreenEntry() {			startScreen=new StartScreen();			stage.addChild(startScreen);			bouton_jouer=new bouton_jouer_();			startScreen.addChild(bouton_jouer);			bouton_jouer.x=10;			bouton_jouer.y=400;			bouton_jouer.addEventListener(MouseEvent.CLICK,MouseClickJouer);			bouton_aide=new bouton_aide_();			startScreen.addChild(bouton_aide);			bouton_aide.x=260;			bouton_aide.y=400;			bouton_aide.addEventListener(MouseEvent.CLICK,MouseClickAide);			bouton_option=new bouton_option_();			startScreen.addChild(bouton_option);			bouton_option.x=520;			bouton_option.y=400;			bouton_option.addEventListener(MouseEvent.CLICK,MouseClickOption);			stage.addEventListener(KeyboardEvent.KEY_DOWN,StartKey);		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initScreenHelp() {			containerScreen= new ContainerScreen();			containerScreen=containerScreen.addHelpScreen();			stage.addChild(containerScreen);			bouton_retour=new bouton_retour_();			containerScreen.addChild(bouton_retour);			bouton_retour.x=20;			bouton_retour.y=20;			bouton_retour.addEventListener(MouseEvent.CLICK,MouseClickMenu);		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initOptionScreen() {			containerScreen= new ContainerScreen;			containerScreen=containerScreen.addOptionScreen();			stage.addChild(containerScreen);			bouton_retour=new bouton_retour_();			containerScreen.addChild(bouton_retour);			bouton_retour.x=20;			bouton_retour.y=20;			bouton_retour.addEventListener(MouseEvent.CLICK,MouseClickMenu);			containerScreen.initRadioButtonOuiCadre();			containerScreen.initRadioButtonNonCadre();			containerScreen.initRadioButtonOuiObs();			containerScreen.initRadioButtonNonObs();			containerScreen.initRadioButtonOuiSound();			containerScreen.initRadioButtonNonSound();			containerScreen.initRadioButtonLent();			containerScreen.initRadioButtonNorm();			containerScreen.initRadioButtonRapide();			bouton_valider=containerScreen.initBoutonValider(bouton_valider);			bouton_valider.addEventListener(MouseEvent.CLICK, MouseClickValider);		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function StartKey(event:KeyboardEvent):void {			if (event.keyCode == Keyboard.SPACE ) {				stage.removeEventListener(KeyboardEvent.KEY_DOWN,StartKey);				bouton_jouer.removeEventListener(MouseEvent.CLICK, MouseClickJouer);				StartGame(vectRes);			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initScreenJeu() {			containerScreen=new ContainerScreen  ;			containerScreen=containerScreen.addContainerScreen();			stage.addChild(containerScreen);			stage.addEventListener(Event.ENTER_FRAME,enterFrameHandler);			if (vectRes[2]) {				titleSound=new title_sound();				titleSound.play();			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function enterFrameHandler(E:Event):void {			containerSerpent.moveSerpent(vectSerpent,keyTouch,speed);			testSerpentHit();			time++;			stage.addEventListener(KeyboardEvent.KEY_DOWN,keyIsDown);			gestionDureePomme();			gestionTemps();		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function gestionTemps() {			timeElapsed++;			var t:Number;			var ts:String;			if ((timeElapsed/stage.frameRate)-60<0) {				t=(timeElapsed/stage.frameRate);				ts=t.toString(10);				timeField.text= ts.charAt(0)+ ts.charAt(1)+ ts.charAt(2)+ ts.charAt(3) + ' s';			} else if ((timeElapsed/stage.frameRate)-60>0) {				timeField.text=((((timeElapsed/stage.frameRate)-((timeElapsed/stage.frameRate)%60))/60).toString(10) + "m " 				+ ((timeElapsed/stage.frameRate)%60).toString(5) + 's');			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initSerpent() {			vectSerpent=new Array  ;			var pos_x=randRange(0,tailleScreenX);			var pos_y=randRange(0,tailleScreenY);			containerSerpent=new ContainerSerpent(320,320);			vectSerpent=containerSerpent.setTailleSerpent(tailleSerpent,vectSerpent,keyTouch);			for (var i=0; i < vectSerpent.length-1; i++) {				containerScreen.addChild(vectSerpent[i]);			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initPommeN() {			//pomme normale			if (cadre) {				limite=30;			} else {				limite=30;			}			var pos_x:Number;			var pos_y:Number;			if (obstacle) {				do {					pos_x=randRange(limite,tailleScreenX-limite);					pos_y=randRange(limite,tailleScreenY-limite);					containerPommeN=new ContainerPomme(pos_x,pos_y);				} while (containerObstacleH.hitTestPoint(containerPommeN.x,containerPommeN.y,false) ||				containerObstacleV.hitTestPoint(containerPommeN.x,containerPommeN.y,false));			} else if (!obstacle) {				pos_x=randRange(limite,tailleScreenX-limite);				pos_y=randRange(limite,tailleScreenY-limite);				containerPommeN=new ContainerPomme(pos_x,pos_y);			}			containerPommeN=containerPommeN.addContainerPommeN();			containerScreen.addChild(containerPommeN);			//pomme verte diminue taille 3		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initPommeV() {			var rand:Number=randNum();			if ((rand==5|| rand==2) && isPommeV==false) {				var pos_vx:Number;				var pos_vy:Number;				if (obstacle) {					do {						pos_vx=randRange(limite,tailleScreenX-limite);						pos_vy=randRange(limite,tailleScreenY-limite);						containerPommeV=new ContainerPommeV(pos_vx,pos_vy);						isPommeV=true;					} while (pos_vx==containerPommeN.x || pos_vy==containerPommeN.y || containerObstacleH.hitTestPoint(containerPommeV.x,containerPommeV.y,false) ||					containerObstacleV.hitTestPoint(containerPommeV.x,containerPommeV.y,false));				} else if (!obstacle) {					do {						pos_vx=randRange(limite,tailleScreenX-limite);						pos_vy=randRange(limite,tailleScreenY-limite);						containerPommeV=new ContainerPommeV(pos_vx,pos_vy);						isPommeV=true;					} while (pos_vx==containerPommeN.x || pos_vy==containerPommeN.y );				}				containerPommeV.addContainerPommeV();				containerScreen.addChild(containerPommeV);			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		public function initPommeM() {			var rand:Number=randNum();			if ((rand==3 || rand==7) && isPommeM==false) {				var pos_mx:Number;				var pos_my:Number;				if (obstacle) {					do {						pos_mx=randRange(limite,tailleScreenX-limite);						pos_my=randRange(limite,tailleScreenY-limite);						containerPommeMar=new ContainerPommeM(pos_mx,pos_my);					} while (pos_mx==containerPommeN.x || pos_my==containerPommeN.y || containerObstacleH.hitTestPoint(containerPommeMar.x,containerPommeMar.y,false) ||					containerObstacleV.hitTestPoint(containerPommeMar.x,containerPommeMar.y,false));				} else if (!obstacle) {					do {						pos_mx=randRange(limite,tailleScreenX-limite);						pos_my=randRange(limite,tailleScreenY-limite);						containerPommeMar=new ContainerPommeM(pos_mx,pos_my);					} while (pos_mx==containerPommeN.x || pos_my==containerPommeN.y );				}				containerPommeMar=containerPommeMar.addContainerPommeM();				containerScreen.addChild(containerPommeMar);				isPommeM=true;			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function gestionDureePomme() {			if (isPommeV) {				timePommeV--;				if (timePommeV<0) {					containerScreen.removeChild(containerPommeV);					isPommeV=false;					timePommeV=100;				}			}			if (isPommeM) {				timePommeM--;				if (timePommeM<0) {					containerScreen.removeChild(containerPommeMar);					isPommeM=false;					timePommeM=200;				}			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function initScoreBarre() {			containerScoreBarre=new ContainerScoreBarre(0,480);			containerScoreBarre=containerScoreBarre.addContainerScoreBarre();			stage.addChild(containerScoreBarre);			scoreField=containerScoreBarre.addTextField();			scoreField.text=scoreValue.toString(10);			timeField=containerScoreBarre.addTimeField();			timeField.text="0s";		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function initCadres() {			containerCadreVD=new ContainerCadre();			containerCadreVD=containerCadreVD.addContainerCadreV();			containerCadreHD=new ContainerCadre();			containerCadreHD= containerCadreHD.addContainerCadreH();			containerCadreVD.x=0;			containerCadreVD.y=0;			containerCadreHD.x=0;			containerCadreHD.y=0;			containerScreen.addChild(containerCadreVD);			containerScreen.addChild(containerCadreHD);			//-------------------------------------------//			containerCadreVG=new ContainerCadre();			containerCadreVG=containerCadreVG.addContainerCadreV();			containerCadreHG=new ContainerCadre();			containerCadreHG= containerCadreHG.addContainerCadreH();			containerCadreVG.x=620;			containerCadreVG.y=0;			containerCadreHG.x=0;			containerCadreHG.y=460;			containerScreen.addChild(containerCadreVG);			containerScreen.addChild(containerCadreHG);			cadre=true;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function initObstacles() {			containerObstacleH= new ContainerObstacle();			containerObstacleH= containerObstacleH.addContainerObstacleH();			do {				var randx=randRangeO(20,(tailleScreenX-tailleObstacleHx)-20);//(2O, 380)				var randy=randRangeO(20,(tailleScreenY-tailleObstacleHy)-20);//(20-220)				containerObstacleH.x=randx;				containerObstacleH.y=randy;			} while (containerObstacleH.testSerpentHitObstacle(vectSerpent));			containerScreen.addChild(containerObstacleH);			//----------------------------------------------------------//			containerObstacleV= new ContainerObstacle();			containerObstacleV= containerObstacleV.addContainerObstacleV();			do {				randx=randRangeO(20,(tailleScreenX-tailleObstacleVx)-20);//(2O, 380)				randy=randRangeO(20,(tailleScreenY-tailleObstacleVy)-20);//(20-220)				containerObstacleV.x=randx;				containerObstacleV.y=randy;			} while (containerObstacleV.testSerpentHitObstacle(vectSerpent) 			|| containerObstacleV.hitTestObject(containerObstacleH));			containerScreen.addChild(containerObstacleV);			obstacle=true;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------/		private function testSerpentHit() {			if (containerSerpent.testSerpentHitPomme(containerPommeN,vectSerpent)) {//test si le serpent touche la pomme rouge				vectSerpent=containerSerpent.incrementeTailleSerpent(tailleSerpent, vectSerpent,keyTouch, tailleSerpent++, containerScreen);				//stage.addEventListener(KeyboardEvent.KEY_DOWN,StartKey);				if (vectRes[2]) {					eatSound=new eat_sound();					eatSound.play();				}				containerScreen.removeChild(containerPommeN);				initPommeN();				initPommeV();				initPommeM();				if ((cadre && !obstacle )|| (!cadre && obstacle)) {					scoreValue+=150;				} else if (cadre && obstacle) {					scoreValue+=200;				} else if (!cadre && !obstacle) {					scoreValue+=100;				}				scoreField.text=scoreValue.toString(10);			}			if (isPommeM) {				if (containerSerpent.testSerpentHitPomme(containerPommeMar,vectSerpent)) {//test si le serpent touche la pomme verte					vectSerpent=containerSerpent.incrementeTailleSerpent(tailleSerpent, vectSerpent,keyTouch, tailleSerpent+=nbGr, containerScreen);					if (vectRes[2]) {						eatSound=new eat_sound();						eatSound.play();					}					//containerScreen.addChild(vectSerpent[tailleSerpent-1]);					containerScreen.removeChild(containerPommeMar);					if ((cadre && !obstacle) || (!cadre && obstacle)) {						scoreValue+=100;					} else if (cadre && obstacle) {						scoreValue+=150;					} else if (!cadre && !obstacle) {						scoreValue+=50;					}					isPommeM=false;					initPommeM();					initPommeV();					scoreField.text=scoreValue.toString(10);				}			}			if (isPommeV) {				if (containerSerpent.testSerpentHitPomme(containerPommeV,vectSerpent)) {//test si le serpent touche la pomme verte					vectSerpent=containerSerpent.decrementeTailleSerpent(tailleSerpent, vectSerpent, tailleSerpent-=nbDim, containerScreen);					if (vectRes[2]) {						eatSound=new eat_sound();						eatSound.play();					}					//containerScreen.addChild(vectSerpent[tailleSerpent-1]);					containerScreen.removeChild(containerPommeV);					if ((cadre && !obstacle) || (!cadre && obstacle)) {						scoreValue+=200;					} else if (cadre && obstacle) {						scoreValue+=250;					} else if (!cadre && !obstacle) {						scoreValue+=150;					}					isPommeV=false;					initPommeM();					initPommeV();					scoreField.text=scoreValue.toString(10);				}			}			if (cadre) {				if (containerCadreVD.testSerpentHitCadre(vectSerpent) || containerCadreVG.testSerpentHitCadre(vectSerpent) 				|| containerCadreHD.testSerpentHitCadre(vectSerpent) || containerCadreHG.testSerpentHitCadre(vectSerpent)) {					SetGameOver();				}			}			if (obstacle) {				if (containerObstacleH.testSerpentHitObstacle(vectSerpent) || containerObstacleV.testSerpentHitObstacle(vectSerpent)) {					SetGameOver();				}			}			if (containerSerpent.testSerpentHitSelf(vectSerpent)) {// test si le serpent se touche lui meme				SetGameOver();			}			vectSerpent=containerSerpent.testSerpentOver(vectSerpent,containerScreen,tailleScreenX,tailleScreenY);//test si le serpent depasse la limite de l'ecran		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function randRange(min:Number,max:Number):Number {			do {				var randomNum:Number=Math.round(Math.random() * max - min + 1) + min;			} while (randomNum % 20 != 0);			return randomNum + 10;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function randRangeO(min:Number,max:Number):Number {			do {				var randomNum:Number=Math.round(Math.random() * max - min + 1) + min;			} while (randomNum % 20 != 0);			return randomNum;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function randNum():Number {			var randomNum:Number=Math.round(Math.random() * 10 - 0 + 1);			return randomNum;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function initVectRes() {			vectRes[0]=false;			vectRes[1]=false;			vectRes[2]=true;			vectRes[3]=2;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function initKey() {			keyTouch=new Array  ;			keyTouch[0]=1;//gauche			keyTouch[1]=0;//droite			keyTouch[2]=0;//bas 			keyTouch[3]=0;//haut			time++;		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function pauseGame() {			stage.removeEventListener(Event.ENTER_FRAME,enterFrameHandler);			isPause=true;			containerPauseScreen=new ContainerScreen();			containerPauseScreen.addPauseScreen();			bouton_continuer=new bouton_continuer_();			containerPauseScreen.addChild(bouton_continuer);			bouton_continuer.x=230;			bouton_continuer.y=170;			bouton_continuer.addEventListener(MouseEvent.CLICK,MouseResumeGame);			containerScreen.addChild(containerPauseScreen);			bouton_menup= new boutonMenu();			containerPauseScreen.addChild(bouton_menup);			bouton_menup.x=230;			bouton_menup.y=240;			bouton_menup.addEventListener(MouseEvent.CLICK,MouseClickMenu);			bouton_son=new bouton_son_();			containerPauseScreen.addChild(bouton_son);			bouton_son.x=230;			bouton_son.y=300;			bouton_son.addEventListener(MouseEvent.CLICK,MouseClickSound);			if (vectRes[2]) {				soundOn=new SoundOn();				containerPauseScreen.addChild(soundOn);				soundOn.x=350;				soundOn.y=300;			} else if (!vectRes[2]) {				soundOff=new SoundOff();				containerPauseScreen.addChild(soundOff);				soundOff.x=350;				soundOff.y=300;			}		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function resumeGame() {			bouton_continuer.removeEventListener(MouseEvent.CLICK,MouseResumeGame);			stage.addEventListener(Event.ENTER_FRAME,enterFrameHandler);			isPause=false;			containerScreen.removeChild(containerPauseScreen);		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function SetGameOver() {			stage.removeEventListener(Event.ENTER_FRAME,enterFrameHandler);			for (var i=0; i < vectSerpent.length-1; i++) {				containerScreen.removeChild(vectSerpent[i]);			}			containerScreen.removeChild(containerPommeN);			containerScreen= new ContainerScreen;			containerScreen=containerScreen.addGameOverScreen();			stage.addChild(containerScreen);			containerScreen.visible=true;			bouton_rejouer=new bouton_rejouer_();			containerScreen.addChild(bouton_rejouer);			bouton_rejouer.x=340;			bouton_rejouer.y=350;			bouton_rejouer.addEventListener(MouseEvent.CLICK,MouseClickJouer);			bouton_menu=new bouton_menu_();			containerScreen.addChild(bouton_menu);			bouton_menu.x=450;			bouton_menu.y=350;			gameOver=true;			bouton_menu.addEventListener(MouseEvent.CLICK,MouseClickMenu);			bouton_submit=new bouton_submit_();			bouton_submit.x=490;			bouton_submit.y=485;			containerScreen.addChild(bouton_submit);			bouton_submit.addEventListener(MouseEvent.CLICK, MouseClickSubmit);			if (vectRes[2]) {				failSound=new fail_sound();				failSound.play();			}		}		private function MouseClickSubmit(E:MouseEvent) {			var url:URLRequest=new URLRequest("./resultats.php?score="+scoreValue+"&jeu=snux");			navigateToURL(url);		}		//-------------------------------------------------------------------------------------------------------------------------------------------------------//		private function keyIsDown(event:KeyboardEvent):void {			if (event.keyCode == Keyboard.LEFT && keyTouch[1] == 0 && time>0  && !isPause) {// lorsque la flèche de gauche est enfoncée				keyTouch[0]=1;//gauche				keyTouch[1]=0;//droite				keyTouch[2]=0;//bas 				keyTouch[3]=0;//haut				time=0;			} else if (event.keyCode == Keyboard.RIGHT && keyTouch[0] == 0 && time>0 && !isPause) {// celle de droite				keyTouch[0]=0;//gauche				keyTouch[1]=1;//droite				keyTouch[2]=0;//bas 				keyTouch[3]=0;//haut				time=0;			} else if (event.keyCode == Keyboard.UP && keyTouch[2] == 0 && time>0 && !isPause) {// celle du haut				keyTouch[0]=0;//gauche				keyTouch[1]=0;//droite				keyTouch[2]=0;//bas 				keyTouch[3]=1;//haut				time=0;			} else if (event.keyCode == Keyboard.DOWN && keyTouch[3] == 0 && time>0 && !isPause) {// celle du bas				keyTouch[0]=0;//gauche				keyTouch[1]=0;//droite				keyTouch[2]=1;//bas 				keyTouch[3]=0;//haut				time=0;			} else if (event.keyCode == Keyboard.SPACE && !isPause && !gameOver) {				pauseGame();			} else if (event.keyCode == Keyboard.SPACE && isPause && !gameOver) {				resumeGame();			}		}	}//fin cla}//fin package